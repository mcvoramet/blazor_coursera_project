@page "/events"
@inject EventService EventService
@rendermode InteractiveServer

<PageTitle>Events - EventEase</PageTitle>

<div class="container mt-4">
    <h1>Upcoming Events</h1>
    
    @if (events == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!events.Any())
    {
        <div class="alert alert-info">
            No events found. <a href="events/create">Create a new event</a>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-4 mt-3">
            @foreach (var evt in events)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        @if (!string.IsNullOrEmpty(evt.ImageUrl))
                        {
                            <img src="@evt.ImageUrl" class="card-img-top" alt="@evt.Title" style="height: 180px; object-fit: cover;">
                        }
                        else
                        {
                            <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 180px;">
                                <span class="text-muted">No image</span>
                            </div>
                        }
                        <div class="card-body">
                            <h5 class="card-title">@evt.Title</h5>
                            <p class="card-text text-truncate">@evt.Description</p>
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-calendar me-2"></i>
                                <small>@evt.Date.ToString("MMM dd, yyyy - h:mm tt")</small>
                            </div>
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-geo-alt me-2"></i>
                                <small>@evt.Location</small>
                            </div>
                            <a href="@($"events/{evt.Id}")" class="btn btn-primary">View Details</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Event>? events;

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetPublishedEventsAsync();
    }
}
